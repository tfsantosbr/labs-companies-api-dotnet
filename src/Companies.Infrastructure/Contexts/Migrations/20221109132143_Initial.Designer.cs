// <auto-generated />
using System;
using Companies.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Companies.Infrastructure.Contexts.Migrations
{
    [DbContext(typeof(CompaniesContext))]
    [Migration("20221109132143_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Companies.Domain.Features.Companies.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("LegalNature")
                        .HasColumnType("smallint");

                    b.Property<int>("MainActivityId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainActivityId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("Companies.Domain.Features.Companies.CompanyPartner", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("JoinedAt")
                        .HasColumnType("date");

                    b.Property<int>("QualificationId")
                        .HasColumnType("integer");

                    b.HasKey("CompanyId", "PartnerId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("QualificationId");

                    b.ToTable("CompanyPartners", (string)null);
                });

            modelBuilder.Entity("Companies.Domain.Features.Companies.CompanyPhone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyPhones", (string)null);
                });

            modelBuilder.Entity("Companies.Domain.Features.CompanyMainActivities.CompanyMainActivity", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Code");

                    b.ToTable("CompanyMainActivities", (string)null);
                });

            modelBuilder.Entity("Companies.Domain.Features.CompanyPartnerQualifications.CompanyPartnerQualification", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Code");

                    b.ToTable("CompanyPartnerQualifications", (string)null);
                });

            modelBuilder.Entity("Companies.Domain.Features.Partners.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Partners", (string)null);
                });

            modelBuilder.Entity("Companies.Domain.Features.Companies.Company", b =>
                {
                    b.HasOne("Companies.Domain.Features.CompanyMainActivities.CompanyMainActivity", "MainActivity")
                        .WithMany()
                        .HasForeignKey("MainActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Companies.Domain.Base.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("Complement");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("Country");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Neighborhood");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("AddressNumber");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Street");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("Companies.Domain.Base.ValueObjects.Cnpj", "Cnpj", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("Cnpj");

                            b1.HasKey("CompanyId");

                            b1.HasIndex("Number")
                                .IsUnique();

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Cnpj")
                        .IsRequired();

                    b.Navigation("MainActivity");
                });

            modelBuilder.Entity("Companies.Domain.Features.Companies.CompanyPartner", b =>
                {
                    b.HasOne("Companies.Domain.Features.Companies.Company", "Company")
                        .WithMany("Partners")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Companies.Domain.Features.Partners.Partner", "Partner")
                        .WithMany("Companies")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Companies.Domain.Features.CompanyPartnerQualifications.CompanyPartnerQualification", "Qualification")
                        .WithMany()
                        .HasForeignKey("QualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Partner");

                    b.Navigation("Qualification");
                });

            modelBuilder.Entity("Companies.Domain.Features.Companies.CompanyPhone", b =>
                {
                    b.HasOne("Companies.Domain.Features.Companies.Company", null)
                        .WithMany("Phones")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Companies.Domain.Base.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("CompanyPhoneId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("CountryCode");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("Number");

                            b1.HasKey("CompanyPhoneId");

                            b1.HasIndex("CountryCode", "Number")
                                .IsUnique();

                            b1.ToTable("CompanyPhones");

                            b1.WithOwner()
                                .HasForeignKey("CompanyPhoneId");
                        });

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("Companies.Domain.Features.Partners.Partner", b =>
                {
                    b.OwnsOne("Companies.Domain.Base.ValueObjects.CompleteName", "CompleteName", b1 =>
                        {
                            b1.Property<Guid>("PartnerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("LastName");

                            b1.HasKey("PartnerId");

                            b1.ToTable("Partners");

                            b1.WithOwner()
                                .HasForeignKey("PartnerId");
                        });

                    b.OwnsOne("Companies.Domain.Base.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("PartnerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("PartnerId");

                            b1.HasIndex("Address")
                                .IsUnique();

                            b1.ToTable("Partners");

                            b1.WithOwner()
                                .HasForeignKey("PartnerId");
                        });

                    b.Navigation("CompleteName")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("Companies.Domain.Features.Companies.Company", b =>
                {
                    b.Navigation("Partners");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("Companies.Domain.Features.Partners.Partner", b =>
                {
                    b.Navigation("Companies");
                });
#pragma warning restore 612, 618
        }
    }
}
